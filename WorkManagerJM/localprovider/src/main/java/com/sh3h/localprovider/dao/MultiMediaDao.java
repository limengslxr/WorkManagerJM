package com.sh3h.localprovider.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sh3h.localprovider.entity.MultiMedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MULTI_MEDIA".
*/
public class MultiMediaDao extends AbstractDao<MultiMedia, Long> {

    public static final String TABLENAME = "MULTI_MEDIA";

    /**
     * Properties of entity MultiMedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property TaskId = new Property(2, long.class, "taskId", false, "TASK_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property SubType = new Property(4, int.class, "subType", false, "SUB_TYPE");
        public final static Property State = new Property(5, int.class, "state", false, "STATE");
        public final static Property FileType = new Property(6, int.class, "fileType", false, "FILE_TYPE");
        public final static Property FileName = new Property(7, String.class, "fileName", false, "FILE_NAME");
        public final static Property ReplyTime = new Property(8, long.class, "replyTime", false, "REPLY_TIME");
        public final static Property FileHash = new Property(9, String.class, "fileHash", false, "FILE_HASH");
        public final static Property FileUrl = new Property(10, String.class, "fileUrl", false, "FILE_URL");
        public final static Property UploadFlag = new Property(11, int.class, "uploadFlag", false, "UPLOAD_FLAG");
        public final static Property Extend = new Property(12, String.class, "extend", false, "EXTEND");
    }

    private Query<MultiMedia> history_MultiMediasQuery;
    private Query<MultiMedia> task_MultiMediasQuery;
    private Query<MultiMedia> temporary_MultiMediasQuery;

    public MultiMediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultiMediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MULTI_MEDIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"TASK_ID\" INTEGER NOT NULL ," + // 2: taskId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"SUB_TYPE\" INTEGER NOT NULL ," + // 4: subType
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 6: fileType
                "\"FILE_NAME\" TEXT NOT NULL ," + // 7: fileName
                "\"REPLY_TIME\" INTEGER NOT NULL ," + // 8: replyTime
                "\"FILE_HASH\" TEXT," + // 9: fileHash
                "\"FILE_URL\" TEXT," + // 10: fileUrl
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 11: uploadFlag
                "\"EXTEND\" TEXT);"); // 12: extend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MULTI_MEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
        stmt.bindLong(3, entity.getTaskId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSubType());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getFileType());
        stmt.bindString(8, entity.getFileName());
        stmt.bindLong(9, entity.getReplyTime());
 
        String fileHash = entity.getFileHash();
        if (fileHash != null) {
            stmt.bindString(10, fileHash);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(11, fileUrl);
        }
        stmt.bindLong(12, entity.getUploadFlag());
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(13, extend);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
        stmt.bindLong(3, entity.getTaskId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSubType());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getFileType());
        stmt.bindString(8, entity.getFileName());
        stmt.bindLong(9, entity.getReplyTime());
 
        String fileHash = entity.getFileHash();
        if (fileHash != null) {
            stmt.bindString(10, fileHash);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(11, fileUrl);
        }
        stmt.bindLong(12, entity.getUploadFlag());
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(13, extend);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MultiMedia readEntity(Cursor cursor, int offset) {
        MultiMedia entity = new MultiMedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.getLong(offset + 2), // taskId
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // subType
            cursor.getInt(offset + 5), // state
            cursor.getInt(offset + 6), // fileType
            cursor.getString(offset + 7), // fileName
            cursor.getLong(offset + 8), // replyTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileHash
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileUrl
            cursor.getInt(offset + 11), // uploadFlag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // extend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiMedia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskId(cursor.getLong(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setSubType(cursor.getInt(offset + 4));
        entity.setState(cursor.getInt(offset + 5));
        entity.setFileType(cursor.getInt(offset + 6));
        entity.setFileName(cursor.getString(offset + 7));
        entity.setReplyTime(cursor.getLong(offset + 8));
        entity.setFileHash(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUploadFlag(cursor.getInt(offset + 11));
        entity.setExtend(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MultiMedia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MultiMedia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiMedia entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "multiMedias" to-many relationship of History. */
    public List<MultiMedia> _queryHistory_MultiMedias(long taskId, int state, long replyTime) {
        synchronized (this) {
            if (history_MultiMediasQuery == null) {
                QueryBuilder<MultiMedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                queryBuilder.where(Properties.State.eq(null));
                queryBuilder.where(Properties.ReplyTime.eq(null));
                history_MultiMediasQuery = queryBuilder.build();
            }
        }
        Query<MultiMedia> query = history_MultiMediasQuery.forCurrentThread();
        query.setParameter(0, taskId);
        query.setParameter(1, state);
        query.setParameter(2, replyTime);
        return query.list();
    }

    /** Internal query to resolve the "multiMedias" to-many relationship of Task. */
    public List<MultiMedia> _queryTask_MultiMedias(long taskId) {
        synchronized (this) {
            if (task_MultiMediasQuery == null) {
                QueryBuilder<MultiMedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_MultiMediasQuery = queryBuilder.build();
            }
        }
        Query<MultiMedia> query = task_MultiMediasQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

    /** Internal query to resolve the "multiMedias" to-many relationship of Temporary. */
    public List<MultiMedia> _queryTemporary_MultiMedias(long taskId, int state, long replyTime) {
        synchronized (this) {
            if (temporary_MultiMediasQuery == null) {
                QueryBuilder<MultiMedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                queryBuilder.where(Properties.State.eq(null));
                queryBuilder.where(Properties.ReplyTime.eq(null));
                temporary_MultiMediasQuery = queryBuilder.build();
            }
        }
        Query<MultiMedia> query = temporary_MultiMediasQuery.forCurrentThread();
        query.setParameter(0, taskId);
        query.setParameter(1, state);
        query.setParameter(2, replyTime);
        return query.list();
    }

}
